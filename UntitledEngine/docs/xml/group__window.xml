<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="group__window" kind="group">
    <compoundname>window</compoundname>
    <title>Window handling</title>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" prot="public" static="no">
        <type>struct <ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref></type>
        <definition>typedef struct GLFWwindow GLFWwindow</definition>
        <argsstring></argsstring>
        <name>GLFWwindow</name>
        <briefdescription>
<para>Opaque window object. </para>        </briefdescription>
        <detaileddescription>
<para>Opaque window object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="706" column="1" bodyfile="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" bodystart="722" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__window_1gafd8db81fdb0e850549dc6bace5ed697a" prot="public" static="no">
        <type><ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref>(*</type>
        <definition>typedef void(*  GLFWwindowposfun) (GLFWwindow *, int, int)</definition>
        <argsstring>)(GLFWwindow *, int, int)</argsstring>
        <name>GLFWwindowposfun</name>
        <briefdescription>
<para>The function signature for window position callbacks. </para>        </briefdescription>
        <detaileddescription>
<para>This is the function signature for window position callback functions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window that was moved. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">xpos</parametername>
</parameternamelist>
<parameterdescription>
<para>The new x-coordinate, in screen coordinates, of the upper-left corner of the client area of the window. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ypos</parametername>
</parameternamelist>
<parameterdescription>
<para>The new y-coordinate, in screen coordinates, of the upper-left corner of the client area of the window.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__window_1gaea610899c4cb070dcd655c6de1fe1d2c" kindref="member">glfwSetWindowPosCallback</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="759" column="1" bodyfile="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" bodystart="759" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__window_1gae49ee6ebc03fa2da024b89943a331355" prot="public" static="no">
        <type><ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref>(*</type>
        <definition>typedef void(*  GLFWwindowsizefun) (GLFWwindow *, int, int)</definition>
        <argsstring>)(GLFWwindow *, int, int)</argsstring>
        <name>GLFWwindowsizefun</name>
        <briefdescription>
<para>The function signature for window resize callbacks. </para>        </briefdescription>
        <detaileddescription>
<para>This is the function signature for window size callback functions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window that was resized. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">width</parametername>
</parameternamelist>
<parameterdescription>
<para>The new width, in screen coordinates, of the window. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">height</parametername>
</parameternamelist>
<parameterdescription>
<para>The new height, in screen coordinates, of the window.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__window_1ga150dad5f364425916c5816074cffa5e7" kindref="member">glfwSetWindowSizeCallback</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="773" column="1" bodyfile="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" bodystart="773" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__window_1ga93e7c2555bd837f4ed8b20f76cada72e" prot="public" static="no">
        <type><ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref>(*</type>
        <definition>typedef void(*  GLFWwindowclosefun) (GLFWwindow *)</definition>
        <argsstring>)(GLFWwindow *)</argsstring>
        <name>GLFWwindowclosefun</name>
        <briefdescription>
<para>The function signature for window close callbacks. </para>        </briefdescription>
        <detaileddescription>
<para>This is the function signature for window close callback functions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window that the user attempted to close.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__window_1ga5b827da350141c789acd64f5c4f7a0e1" kindref="member">glfwSetWindowCloseCallback</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="785" column="1" bodyfile="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" bodystart="785" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__window_1ga7a56f9e0227e2cd9470d80d919032e08" prot="public" static="no">
        <type><ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref>(*</type>
        <definition>typedef void(*  GLFWwindowrefreshfun) (GLFWwindow *)</definition>
        <argsstring>)(GLFWwindow *)</argsstring>
        <name>GLFWwindowrefreshfun</name>
        <briefdescription>
<para>The function signature for window content refresh callbacks. </para>        </briefdescription>
        <detaileddescription>
<para>This is the function signature for window refresh callback functions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose content needs to be refreshed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__window_1ga9d2621fbc271a0cdc0ce91f9749f46e3" kindref="member">glfwSetWindowRefreshCallback</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="797" column="1" bodyfile="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" bodystart="797" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__window_1ga58be2061828dd35080bb438405d3a7e2" prot="public" static="no">
        <type><ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref>(*</type>
        <definition>typedef void(*  GLFWwindowfocusfun) (GLFWwindow *, int)</definition>
        <argsstring>)(GLFWwindow *, int)</argsstring>
        <name>GLFWwindowfocusfun</name>
        <briefdescription>
<para>The function signature for window focus/defocus callbacks. </para>        </briefdescription>
        <detaileddescription>
<para>This is the function signature for window focus callback functions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window that gained or lost input focus. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">focused</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>GL_TRUE</computeroutput> if the window was given input focus, or <computeroutput>GL_FALSE</computeroutput> if it lost it.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__window_1gac89c6534ba7fbab6f6c68b855656c0d4" kindref="member">glfwSetWindowFocusCallback</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="811" column="1" bodyfile="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" bodystart="811" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__window_1gad2d4e4c3d28b1242e742e8268b9528af" prot="public" static="no">
        <type><ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref>(*</type>
        <definition>typedef void(*  GLFWwindowiconifyfun) (GLFWwindow *, int)</definition>
        <argsstring>)(GLFWwindow *, int)</argsstring>
        <name>GLFWwindowiconifyfun</name>
        <briefdescription>
<para>The function signature for window iconify/restore callbacks. </para>        </briefdescription>
        <detaileddescription>
<para>This is the function signature for window iconify/restore callback functions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window that was iconified or restored. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">iconified</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>GL_TRUE</computeroutput> if the window was iconified, or <computeroutput>GL_FALSE</computeroutput> if it was restored.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__window_1ga17cd86946117b56c76397530900519db" kindref="member">glfwSetWindowIconifyCallback</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="826" column="1" bodyfile="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" bodystart="826" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__window_1ga3e218ef9ff826129c55a7d5f6971a285" prot="public" static="no">
        <type><ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref>(*</type>
        <definition>typedef void(*  GLFWframebuffersizefun) (GLFWwindow *, int, int)</definition>
        <argsstring>)(GLFWwindow *, int, int)</argsstring>
        <name>GLFWframebuffersizefun</name>
        <briefdescription>
<para>The function signature for framebuffer resize callbacks. </para>        </briefdescription>
        <detaileddescription>
<para>This is the function signature for framebuffer resize callback functions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose framebuffer was resized. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">width</parametername>
</parameternamelist>
<parameterdescription>
<para>The new width, in pixels, of the framebuffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">height</parametername>
</parameternamelist>
<parameterdescription>
<para>The new height, in pixels, of the framebuffer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__window_1gad766bcdb4465f9c6c62e5d8ca7cfba56" kindref="member">glfwSetFramebufferSizeCallback</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="841" column="1" bodyfile="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" bodystart="841" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__window_1ga8050ddceed9dc6bd9d3aa35666195cd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>GLFWAPI void glfwDefaultWindowHints</definition>
        <argsstring>(void)</argsstring>
        <name>glfwDefaultWindowHints</name>
        <param>
          <type><ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        </param>
        <briefdescription>
<para>Resets all window hints to their default values. </para>        </briefdescription>
        <detaileddescription>
<para>This function resets all window hints to their default values.</para><para><simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para></simplesect>
<simplesect kind="see"><para>window_hints </para></simplesect>
<simplesect kind="see"><para><ref refid="group__window_1gab6e60483d79175b868d6d4dc1dcc63e2" kindref="member">glfwWindowHint</ref></para></simplesect>
<simplesect kind="since"><para>Added in GLFW 3.0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="1515" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gab6e60483d79175b868d6d4dc1dcc63e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>GLFWAPI void glfwWindowHint</definition>
        <argsstring>(int target, int hint)</argsstring>
        <name>glfwWindowHint</name>
        <param>
          <type><ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref></type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref></type>
          <declname>hint</declname>
        </param>
        <briefdescription>
<para>Sets the specified window hint to the desired value. </para>        </briefdescription>
        <detaileddescription>
<para>This function sets hints for the next call to <ref refid="group__window_1ga680a02abe0e4494b6759d5703240713e" kindref="member">glfwCreateWindow</ref>. The hints, once set, retain their values until changed by a call to <ref refid="group__window_1gab6e60483d79175b868d6d4dc1dcc63e2" kindref="member">glfwWindowHint</ref> or <ref refid="group__window_1ga8050ddceed9dc6bd9d3aa35666195cd4" kindref="member">glfwDefaultWindowHints</ref>, or until the library is terminated.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">target</parametername>
</parameternamelist>
<parameterdescription>
<para>The window hint to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">hint</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value of the window hint.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para></simplesect>
<simplesect kind="see"><para>window_hints </para></simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga8050ddceed9dc6bd9d3aa35666195cd4" kindref="member">glfwDefaultWindowHints</ref></para></simplesect>
<simplesect kind="since"><para>Added in GLFW 3.0. Replaces <computeroutput>glfwOpenWindowHint</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="1537" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga680a02abe0e4494b6759d5703240713e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
        <definition>GLFWAPI GLFWwindow* glfwCreateWindow</definition>
        <argsstring>(int width, int height, const char *title, GLFWmonitor *monitor, GLFWwindow *share)</argsstring>
        <name>glfwCreateWindow</name>
        <param>
          <type><ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref></type>
          <declname>width</declname>
        </param>
        <param>
          <type><ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref></type>
          <declname>height</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>title</declname>
        </param>
        <param>
          <type><ref refid="group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3" kindref="member">GLFWmonitor</ref> *</type>
          <declname>monitor</declname>
        </param>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>share</declname>
        </param>
        <briefdescription>
<para>Creates a window and its associated context. </para>        </briefdescription>
        <detaileddescription>
<para>This function creates a window and its associated OpenGL or OpenGL ES context. Most of the options controlling how the window and its context should be created are specified with window hints.</para><para>Successful creation does not change which context is current. Before you can use the newly created context, you need to make it current. For information about the <computeroutput>share</computeroutput> parameter, see context_sharing.</para><para>The created window, framebuffer and context may differ from what you requested, as not all parameters and hints are hard constraints. This includes the size of the window, especially for full screen windows. To query the actual attributes of the created window, framebuffer and context, use queries like <ref refid="group__window_1ga1bb0c7e100418e284dbb800789c63d40" kindref="member">glfwGetWindowAttrib</ref> and <ref refid="group__window_1ga7feb769ebb3f3d21579b5a3fb07be76e" kindref="member">glfwGetWindowSize</ref>.</para><para>To create a full screen window, you need to specify the monitor the window will cover. If no monitor is specified, windowed mode will be used. Unless you have a way for the user to choose a specific monitor, it is recommended that you pick the primary monitor. For more information on how to query connected monitors, see monitor_monitors.</para><para>For full screen windows, the specified size becomes the resolution of the window&apos;s <emphasis>desired video mode</emphasis>. As long as a full screen window has input focus, the supported video mode most closely matching the desired video mode is set for the specified monitor. For more information about full screen windows, including the creation of so called <emphasis>windowed full screen</emphasis> or <emphasis>borderless full screen</emphasis> windows, see window_windowed_full_screen.</para><para>By default, newly created windows use the placement recommended by the window system. To create the window at a specific position, make it initially invisible using the GLFW_VISIBLE window hint, set its position and then show it.</para><para>If a full screen window has input focus, the screensaver is prohibited from starting.</para><para>Window systems put limits on window sizes. Very large or very small window dimensions may be overridden by the window system on creation. Check the actual size after creation.</para><para>The swap interval is not set during window creation and the initial value may vary depending on driver settings and defaults.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">width</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired width, in screen coordinates, of the window. This must be greater than zero. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">height</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired height, in screen coordinates, of the window. This must be greater than zero. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">title</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial, UTF-8 encoded window title. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">monitor</parametername>
</parameternamelist>
<parameterdescription>
<para>The monitor to use for full screen mode, or <computeroutput>NULL</computeroutput> to use windowed mode. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">share</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose context to share resources with, or <computeroutput>NULL</computeroutput> to not share resources. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The handle of the created window, or <computeroutput>NULL</computeroutput> if an error occurred.</para></simplesect>
<simplesect kind="remark"><para><bold>Windows:</bold> Window creation will fail if the Microsoft GDI software OpenGL implementation is the only one available.</para></simplesect>
<simplesect kind="remark"><para><bold>Windows:</bold> If the executable has an icon resource named <computeroutput>GLFW_ICON,</computeroutput> it will be set as the icon for the window. If no such icon is present, the <computeroutput>IDI_WINLOGO</computeroutput> icon will be used instead.</para></simplesect>
<simplesect kind="remark"><para><bold>Windows:</bold> The context to share resources with may not be current on any other thread.</para></simplesect>
<simplesect kind="remark"><para><bold>OS X:</bold> The GLFW window has no icon, as it is not a document window, but the dock icon will be the same as the application bundle&apos;s icon. For more information on bundles, see the <ulink url="https://developer.apple.com/library/mac/documentation/CoreFoundation/Conceptual/CFBundles/">Bundle Programming Guide</ulink> in the Mac Developer Library.</para></simplesect>
<simplesect kind="remark"><para><bold>OS X:</bold> The first time a window is created the menu bar is populated with common commands like Hide, Quit and About. The About entry opens a minimal about dialog with information from the application&apos;s bundle. The menu bar can be disabled with a compile-time option.</para></simplesect>
<simplesect kind="remark"><para><bold>OS X:</bold> On OS X 10.10 and later the window frame will not be rendered at full resolution on Retina displays unless the <computeroutput>NSHighResolutionCapable</computeroutput> key is enabled in the application bundle&apos;s <computeroutput>Info.plist</computeroutput>. For more information, see <ulink url="https://developer.apple.com/library/mac/documentation/GraphicsAnimation/Conceptual/HighResolutionOSX/Explained/Explained.html">High Resolution Guidelines for OS X</ulink> in the Mac Developer Library.</para></simplesect>
<simplesect kind="remark"><para><bold>X11:</bold> There is no mechanism for setting the window icon yet.</para></simplesect>
<simplesect kind="remark"><para><bold>X11:</bold> Some window managers will not respect the placement of initially hidden windows.</para></simplesect>
<simplesect kind="par"><title>Reentrancy</title><para>This function may not be called from a callback.</para></simplesect>
<simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para></simplesect>
<simplesect kind="see"><para>window_creation </para></simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga806747476b7247d292be3711c323ea10" kindref="member">glfwDestroyWindow</ref></para></simplesect>
<simplesect kind="since"><para>Added in GLFW 3.0. Replaces <computeroutput>glfwOpenWindow</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="1645" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga806747476b7247d292be3711c323ea10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>GLFWAPI void glfwDestroyWindow</definition>
        <argsstring>(GLFWwindow *window)</argsstring>
        <name>glfwDestroyWindow</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
<para>Destroys the specified window and its context. </para>        </briefdescription>
        <detaileddescription>
<para>This function destroys the specified window and its context. On calling this function, no further callbacks will be called for that window.</para><para>If the context of the specified window is current on the main thread, it is detached before being destroyed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to destroy.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The context of the specified window must not be current on any other thread when this function is called.</para></simplesect>
<simplesect kind="par"><title>Reentrancy</title><para>This function may not be called from a callback.</para></simplesect>
<simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para></simplesect>
<simplesect kind="see"><para>window_creation </para></simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga680a02abe0e4494b6759d5703240713e" kindref="member">glfwCreateWindow</ref></para></simplesect>
<simplesect kind="since"><para>Added in GLFW 3.0. Replaces <computeroutput>glfwCloseWindow</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="1673" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gaa6162f67dfa38b8beda2fea623649332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref></type>
        <definition>GLFWAPI int glfwWindowShouldClose</definition>
        <argsstring>(GLFWwindow *window)</argsstring>
        <name>glfwWindowShouldClose</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
<para>Checks the close flag of the specified window. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the value of the close flag of the specified window.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to query. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the close flag.</para></simplesect>
<simplesect kind="par"><title>Thread Safety</title><para>This function may be called from any thread. Access is not synchronized.</para></simplesect>
<simplesect kind="see"><para>window_close</para></simplesect>
<simplesect kind="since"><para>Added in GLFW 3.0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="1691" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga1cadeda7a1e2f224e06a8415d30741aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>GLFWAPI void glfwSetWindowShouldClose</definition>
        <argsstring>(GLFWwindow *window, int value)</argsstring>
        <name>glfwSetWindowShouldClose</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type><ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the close flag of the specified window. </para>        </briefdescription>
        <detaileddescription>
<para>This function sets the value of the close flag of the specified window. This can be used to override the user&apos;s attempt to close the window, or to signal that it should be closed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose flag to change. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Thread Safety</title><para>This function may be called from any thread. Access is not synchronized.</para></simplesect>
<simplesect kind="see"><para>window_close</para></simplesect>
<simplesect kind="since"><para>Added in GLFW 3.0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="1711" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga861ed3414ab8120e2f74151a666ed1dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>GLFWAPI void glfwSetWindowTitle</definition>
        <argsstring>(GLFWwindow *window, const char *title)</argsstring>
        <name>glfwSetWindowTitle</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>title</declname>
        </param>
        <briefdescription>
<para>Sets the title of the specified window. </para>        </briefdescription>
        <detaileddescription>
<para>This function sets the window title, encoded as UTF-8, of the specified window.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose title to change. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">title</parametername>
</parameternamelist>
<parameterdescription>
<para>The UTF-8 encoded window title.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para></simplesect>
<simplesect kind="see"><para>window_title</para></simplesect>
<simplesect kind="since"><para>Added in GLFW 1.0.</para></simplesect>
<simplesect kind="par"><title></title><para><bold>GLFW 3:</bold> Added window handle parameter. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="1733" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga0076a8591ef7494d359730cf2250b45b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>GLFWAPI void glfwGetWindowPos</definition>
        <argsstring>(GLFWwindow *window, int *xpos, int *ypos)</argsstring>
        <name>glfwGetWindowPos</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type><ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref> *</type>
          <declname>xpos</declname>
        </param>
        <param>
          <type><ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref> *</type>
          <declname>ypos</declname>
        </param>
        <briefdescription>
<para>Retrieves the position of the client area of the specified window. </para>        </briefdescription>
        <detaileddescription>
<para>This function retrieves the position, in screen coordinates, of the upper-left corner of the client area of the specified window.</para><para>Any or all of the position arguments may be <computeroutput>NULL</computeroutput>. If an error occurs, all non-<computeroutput>NULL</computeroutput> position arguments will be set to zero.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to query. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">xpos</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the x-coordinate of the upper-left corner of the client area, or <computeroutput>NULL</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ypos</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the y-coordinate of the upper-left corner of the client area, or <computeroutput>NULL</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para></simplesect>
<simplesect kind="see"><para>window_pos </para></simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga0dc8d880a0d87be16d3ea8114561f6f0" kindref="member">glfwSetWindowPos</ref></para></simplesect>
<simplesect kind="since"><para>Added in GLFW 3.0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="1759" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga0dc8d880a0d87be16d3ea8114561f6f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>GLFWAPI void glfwSetWindowPos</definition>
        <argsstring>(GLFWwindow *window, int xpos, int ypos)</argsstring>
        <name>glfwSetWindowPos</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type><ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref></type>
          <declname>xpos</declname>
        </param>
        <param>
          <type><ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref></type>
          <declname>ypos</declname>
        </param>
        <briefdescription>
<para>Sets the position of the client area of the specified window. </para>        </briefdescription>
        <detaileddescription>
<para>This function sets the position, in screen coordinates, of the upper-left corner of the client area of the specified windowed mode window. If the window is a full screen window, this function does nothing.</para><para><bold>Do not use this function</bold> to move an already visible window unless you have very good reasons for doing so, as it will confuse and annoy the user.</para><para>The window manager may put limits on what positions are allowed. GLFW cannot and should not override these limits.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to query. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">xpos</parametername>
</parameternamelist>
<parameterdescription>
<para>The x-coordinate of the upper-left corner of the client area. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ypos</parametername>
</parameternamelist>
<parameterdescription>
<para>The y-coordinate of the upper-left corner of the client area.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para></simplesect>
<simplesect kind="see"><para>window_pos </para></simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga0076a8591ef7494d359730cf2250b45b" kindref="member">glfwGetWindowPos</ref></para></simplesect>
<simplesect kind="since"><para>Added in GLFW 1.0.</para></simplesect>
<simplesect kind="par"><title></title><para><bold>GLFW 3:</bold> Added window handle parameter. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="1790" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga7feb769ebb3f3d21579b5a3fb07be76e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>GLFWAPI void glfwGetWindowSize</definition>
        <argsstring>(GLFWwindow *window, int *width, int *height)</argsstring>
        <name>glfwGetWindowSize</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type><ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref> *</type>
          <declname>width</declname>
        </param>
        <param>
          <type><ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref> *</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Retrieves the size of the client area of the specified window. </para>        </briefdescription>
        <detaileddescription>
<para>This function retrieves the size, in screen coordinates, of the client area of the specified window. If you wish to retrieve the size of the framebuffer of the window in pixels, see <ref refid="group__window_1gaf7d17f3534b4b6dc9a6f905e3a240b7e" kindref="member">glfwGetFramebufferSize</ref>.</para><para>Any or all of the size arguments may be <computeroutput>NULL</computeroutput>. If an error occurs, all non-<computeroutput>NULL</computeroutput> size arguments will be set to zero.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose size to retrieve. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">width</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the width, in screen coordinates, of the client area, or <computeroutput>NULL</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">height</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the height, in screen coordinates, of the client area, or <computeroutput>NULL</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para></simplesect>
<simplesect kind="see"><para>window_size </para></simplesect>
<simplesect kind="see"><para><ref refid="group__window_1gae54d1f4915ded15e267ddd3f41496cd2" kindref="member">glfwSetWindowSize</ref></para></simplesect>
<simplesect kind="since"><para>Added in GLFW 1.0.</para></simplesect>
<simplesect kind="par"><title></title><para><bold>GLFW 3:</bold> Added window handle parameter. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="1820" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gae54d1f4915ded15e267ddd3f41496cd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>GLFWAPI void glfwSetWindowSize</definition>
        <argsstring>(GLFWwindow *window, int width, int height)</argsstring>
        <name>glfwSetWindowSize</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type><ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref></type>
          <declname>width</declname>
        </param>
        <param>
          <type><ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref></type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Sets the size of the client area of the specified window. </para>        </briefdescription>
        <detaileddescription>
<para>This function sets the size, in screen coordinates, of the client area of the specified window.</para><para>For full screen windows, this function selects and switches to the resolution closest to the specified size, without affecting the window&apos;s context. As the context is unaffected, the bit depths of the framebuffer remain unchanged.</para><para>The window manager may put limits on what sizes are allowed. GLFW cannot and should not override these limits.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to resize. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">width</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired width of the specified window. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">height</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired height of the specified window.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para></simplesect>
<simplesect kind="see"><para>window_size </para></simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga7feb769ebb3f3d21579b5a3fb07be76e" kindref="member">glfwGetWindowSize</ref></para></simplesect>
<simplesect kind="since"><para>Added in GLFW 1.0.</para></simplesect>
<simplesect kind="par"><title></title><para><bold>GLFW 3:</bold> Added window handle parameter. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="1852" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gaf7d17f3534b4b6dc9a6f905e3a240b7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>GLFWAPI void glfwGetFramebufferSize</definition>
        <argsstring>(GLFWwindow *window, int *width, int *height)</argsstring>
        <name>glfwGetFramebufferSize</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type><ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref> *</type>
          <declname>width</declname>
        </param>
        <param>
          <type><ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref> *</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Retrieves the size of the framebuffer of the specified window. </para>        </briefdescription>
        <detaileddescription>
<para>This function retrieves the size, in pixels, of the framebuffer of the specified window. If you wish to retrieve the size of the window in screen coordinates, see <ref refid="group__window_1ga7feb769ebb3f3d21579b5a3fb07be76e" kindref="member">glfwGetWindowSize</ref>.</para><para>Any or all of the size arguments may be <computeroutput>NULL</computeroutput>. If an error occurs, all non-<computeroutput>NULL</computeroutput> size arguments will be set to zero.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose framebuffer to query. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">width</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the width, in pixels, of the framebuffer, or <computeroutput>NULL</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">height</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the height, in pixels, of the framebuffer, or <computeroutput>NULL</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para></simplesect>
<simplesect kind="see"><para>window_fbsize </para></simplesect>
<simplesect kind="see"><para><ref refid="group__window_1gad766bcdb4465f9c6c62e5d8ca7cfba56" kindref="member">glfwSetFramebufferSizeCallback</ref></para></simplesect>
<simplesect kind="since"><para>Added in GLFW 3.0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="1879" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gaad46cdaae2eb732f68d3a1499a7c5409" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>GLFWAPI void glfwGetWindowFrameSize</definition>
        <argsstring>(GLFWwindow *window, int *left, int *top, int *right, int *bottom)</argsstring>
        <name>glfwGetWindowFrameSize</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type><ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref> *</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref> *</type>
          <declname>top</declname>
        </param>
        <param>
          <type><ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref> *</type>
          <declname>right</declname>
        </param>
        <param>
          <type><ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref> *</type>
          <declname>bottom</declname>
        </param>
        <briefdescription>
<para>Retrieves the size of the frame of the window. </para>        </briefdescription>
        <detaileddescription>
<para>This function retrieves the size, in screen coordinates, of each edge of the frame of the specified window. This size includes the title bar, if the window has one. The size of the frame may vary depending on the window-related hints used to create it.</para><para>Because this function retrieves the size of each window frame edge and not the offset along a particular coordinate axis, the retrieved values will always be zero or positive.</para><para>Any or all of the size arguments may be <computeroutput>NULL</computeroutput>. If an error occurs, all non-<computeroutput>NULL</computeroutput> size arguments will be set to zero.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose frame size to query. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">left</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the size, in screen coordinates, of the left edge of the window frame, or <computeroutput>NULL</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">top</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the size, in screen coordinates, of the top edge of the window frame, or <computeroutput>NULL</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">right</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the size, in screen coordinates, of the right edge of the window frame, or <computeroutput>NULL</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">bottom</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the size, in screen coordinates, of the bottom edge of the window frame, or <computeroutput>NULL</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para></simplesect>
<simplesect kind="see"><para>window_size</para></simplesect>
<simplesect kind="since"><para>Added in GLFW 3.1. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="1914" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga24274e3c6ecd44e11fec5e6b66e4d7f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>GLFWAPI void glfwIconifyWindow</definition>
        <argsstring>(GLFWwindow *window)</argsstring>
        <name>glfwIconifyWindow</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
<para>Iconifies the specified window. </para>        </briefdescription>
        <detaileddescription>
<para>This function iconifies (minimizes) the specified window if it was previously restored. If the window is already iconified, this function does nothing.</para><para>If the specified window is a full screen window, the original monitor resolution is restored until the window is restored.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to iconify.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para></simplesect>
<simplesect kind="see"><para>window_iconify </para></simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga1e29caf0b819f578b04db52fff17256c" kindref="member">glfwRestoreWindow</ref></para></simplesect>
<simplesect kind="since"><para>Added in GLFW 2.1.</para></simplesect>
<simplesect kind="par"><title></title><para><bold>GLFW 3:</bold> Added window handle parameter. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="1940" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga1e29caf0b819f578b04db52fff17256c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>GLFWAPI void glfwRestoreWindow</definition>
        <argsstring>(GLFWwindow *window)</argsstring>
        <name>glfwRestoreWindow</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
<para>Restores the specified window. </para>        </briefdescription>
        <detaileddescription>
<para>This function restores the specified window if it was previously iconified (minimized). If the window is already restored, this function does nothing.</para><para>If the specified window is a full screen window, the resolution chosen for the window is restored on the selected monitor.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to restore.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para></simplesect>
<simplesect kind="see"><para>window_iconify </para></simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga24274e3c6ecd44e11fec5e6b66e4d7f3" kindref="member">glfwIconifyWindow</ref></para></simplesect>
<simplesect kind="since"><para>Added in GLFW 2.1.</para></simplesect>
<simplesect kind="par"><title></title><para><bold>GLFW 3:</bold> Added window handle parameter. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="1965" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga7945bcdff9e5e058cf36505d6873ed8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>GLFWAPI void glfwShowWindow</definition>
        <argsstring>(GLFWwindow *window)</argsstring>
        <name>glfwShowWindow</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
<para>Makes the specified window visible. </para>        </briefdescription>
        <detaileddescription>
<para>This function makes the specified window visible if it was previously hidden. If the window is already visible or is in full screen mode, this function does nothing.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to make visible.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para></simplesect>
<simplesect kind="see"><para>window_hide </para></simplesect>
<simplesect kind="see"><para><ref refid="group__window_1gaa17e287d521544bdeceafa09ac036e20" kindref="member">glfwHideWindow</ref></para></simplesect>
<simplesect kind="since"><para>Added in GLFW 3.0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="1985" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gaa17e287d521544bdeceafa09ac036e20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>GLFWAPI void glfwHideWindow</definition>
        <argsstring>(GLFWwindow *window)</argsstring>
        <name>glfwHideWindow</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
<para>Hides the specified window. </para>        </briefdescription>
        <detaileddescription>
<para>This function hides the specified window if it was previously visible. If the window is already hidden or is in full screen mode, this function does nothing.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to hide.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para></simplesect>
<simplesect kind="see"><para>window_hide </para></simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga7945bcdff9e5e058cf36505d6873ed8c" kindref="member">glfwShowWindow</ref></para></simplesect>
<simplesect kind="since"><para>Added in GLFW 3.0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="2005" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gaf1525cb3bccd5789c702cc9676ef3403" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3" kindref="member">GLFWmonitor</ref> *</type>
        <definition>GLFWAPI GLFWmonitor* glfwGetWindowMonitor</definition>
        <argsstring>(GLFWwindow *window)</argsstring>
        <name>glfwGetWindowMonitor</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
<para>Returns the monitor that the window uses for full screen mode. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the handle of the monitor that the specified window is in full screen on.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to query. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The monitor, or <computeroutput>NULL</computeroutput> if the window is in windowed mode or an error occurred.</para></simplesect>
<simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para></simplesect>
<simplesect kind="see"><para>window_monitor</para></simplesect>
<simplesect kind="since"><para>Added in GLFW 3.0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="2025" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga1bb0c7e100418e284dbb800789c63d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref></type>
        <definition>GLFWAPI int glfwGetWindowAttrib</definition>
        <argsstring>(GLFWwindow *window, int attrib)</argsstring>
        <name>glfwGetWindowAttrib</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type><ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref></type>
          <declname>attrib</declname>
        </param>
        <briefdescription>
<para>Returns an attribute of the specified window. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the value of an attribute of the specified window or its OpenGL or OpenGL ES context.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to query. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attrib</parametername>
</parameternamelist>
<parameterdescription>
<para>The window attribute whose value to return. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the attribute, or zero if an error occurred.</para></simplesect>
<simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para></simplesect>
<simplesect kind="see"><para>window_attribs</para></simplesect>
<simplesect kind="since"><para>Added in GLFW 3.0. Replaces <computeroutput>glfwGetWindowParam</computeroutput> and <computeroutput>glfwGetGLVersion</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="2048" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gacc9e68faee3c1763b54cd9bc405cf43e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>GLFWAPI void glfwSetWindowUserPointer</definition>
        <argsstring>(GLFWwindow *window, void *pointer)</argsstring>
        <name>glfwSetWindowUserPointer</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type><ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref> *</type>
          <declname>pointer</declname>
        </param>
        <briefdescription>
<para>Sets the user pointer of the specified window. </para>        </briefdescription>
        <detaileddescription>
<para>This function sets the user-defined pointer of the specified window. The current value is retained until the window is destroyed. The initial value is <computeroutput>NULL</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose pointer to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Thread Safety</title><para>This function may be called from any thread. Access is not synchronized.</para></simplesect>
<simplesect kind="see"><para>window_userptr </para></simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga0a9ff3b4bf8589e9518e8816d06a8f50" kindref="member">glfwGetWindowUserPointer</ref></para></simplesect>
<simplesect kind="since"><para>Added in GLFW 3.0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="2069" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga0a9ff3b4bf8589e9518e8816d06a8f50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref> *</type>
        <definition>GLFWAPI void* glfwGetWindowUserPointer</definition>
        <argsstring>(GLFWwindow *window)</argsstring>
        <name>glfwGetWindowUserPointer</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
<para>Returns the user pointer of the specified window. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the current value of the user-defined pointer of the specified window. The initial value is <computeroutput>NULL</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose pointer to return.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Thread Safety</title><para>This function may be called from any thread. Access is not synchronized.</para></simplesect>
<simplesect kind="see"><para>window_userptr </para></simplesect>
<simplesect kind="see"><para><ref refid="group__window_1gacc9e68faee3c1763b54cd9bc405cf43e" kindref="member">glfwSetWindowUserPointer</ref></para></simplesect>
<simplesect kind="since"><para>Added in GLFW 3.0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="2088" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gaea610899c4cb070dcd655c6de1fe1d2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="group__window_1gafd8db81fdb0e850549dc6bace5ed697a" kindref="member">GLFWwindowposfun</ref></type>
        <definition>GLFWAPI GLFWwindowposfun glfwSetWindowPosCallback</definition>
        <argsstring>(GLFWwindow *window, GLFWwindowposfun cbfun)</argsstring>
        <name>glfwSetWindowPosCallback</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type><ref refid="group__window_1gafd8db81fdb0e850549dc6bace5ed697a" kindref="member">GLFWwindowposfun</ref></type>
          <declname>cbfun</declname>
        </param>
        <briefdescription>
<para>Sets the position callback for the specified window. </para>        </briefdescription>
        <detaileddescription>
<para>This function sets the position callback of the specified window, which is called when the window is moved. The callback is provided with the screen position of the upper-left corner of the client area of the window.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose callback to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cbfun</parametername>
</parameternamelist>
<parameterdescription>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been initialized.</para></simplesect>
<simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para></simplesect>
<simplesect kind="see"><para>window_pos</para></simplesect>
<simplesect kind="since"><para>Added in GLFW 3.0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="2111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga150dad5f364425916c5816074cffa5e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="group__window_1gae49ee6ebc03fa2da024b89943a331355" kindref="member">GLFWwindowsizefun</ref></type>
        <definition>GLFWAPI GLFWwindowsizefun glfwSetWindowSizeCallback</definition>
        <argsstring>(GLFWwindow *window, GLFWwindowsizefun cbfun)</argsstring>
        <name>glfwSetWindowSizeCallback</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type><ref refid="group__window_1gae49ee6ebc03fa2da024b89943a331355" kindref="member">GLFWwindowsizefun</ref></type>
          <declname>cbfun</declname>
        </param>
        <briefdescription>
<para>Sets the size callback for the specified window. </para>        </briefdescription>
        <detaileddescription>
<para>This function sets the size callback of the specified window, which is called when the window is resized. The callback is provided with the size, in screen coordinates, of the client area of the window.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose callback to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cbfun</parametername>
</parameternamelist>
<parameterdescription>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been initialized.</para></simplesect>
<simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para></simplesect>
<simplesect kind="see"><para>window_size</para></simplesect>
<simplesect kind="since"><para>Added in GLFW 1.0.</para></simplesect>
<simplesect kind="par"><title></title><para><bold>GLFW 3:</bold> Added window handle parameter. Updated callback signature. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="2137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga5b827da350141c789acd64f5c4f7a0e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="group__window_1ga93e7c2555bd837f4ed8b20f76cada72e" kindref="member">GLFWwindowclosefun</ref></type>
        <definition>GLFWAPI GLFWwindowclosefun glfwSetWindowCloseCallback</definition>
        <argsstring>(GLFWwindow *window, GLFWwindowclosefun cbfun)</argsstring>
        <name>glfwSetWindowCloseCallback</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type><ref refid="group__window_1ga93e7c2555bd837f4ed8b20f76cada72e" kindref="member">GLFWwindowclosefun</ref></type>
          <declname>cbfun</declname>
        </param>
        <briefdescription>
<para>Sets the close callback for the specified window. </para>        </briefdescription>
        <detaileddescription>
<para>This function sets the close callback of the specified window, which is called when the user attempts to close the window, for example by clicking the close widget in the title bar.</para><para>The close flag is set before this callback is called, but you can modify it at any time with <ref refid="group__window_1ga1cadeda7a1e2f224e06a8415d30741aa" kindref="member">glfwSetWindowShouldClose</ref>.</para><para>The close callback is not triggered by <ref refid="group__window_1ga806747476b7247d292be3711c323ea10" kindref="member">glfwDestroyWindow</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose callback to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cbfun</parametername>
</parameternamelist>
<parameterdescription>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been initialized.</para></simplesect>
<simplesect kind="remark"><para><bold>OS X:</bold> Selecting Quit from the application menu will trigger the close callback for all windows.</para></simplesect>
<simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para></simplesect>
<simplesect kind="see"><para>window_close</para></simplesect>
<simplesect kind="since"><para>Added in GLFW 2.5.</para></simplesect>
<simplesect kind="par"><title></title><para><bold>GLFW 3:</bold> Added window handle parameter. Updated callback signature. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="2171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga9d2621fbc271a0cdc0ce91f9749f46e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="group__window_1ga7a56f9e0227e2cd9470d80d919032e08" kindref="member">GLFWwindowrefreshfun</ref></type>
        <definition>GLFWAPI GLFWwindowrefreshfun glfwSetWindowRefreshCallback</definition>
        <argsstring>(GLFWwindow *window, GLFWwindowrefreshfun cbfun)</argsstring>
        <name>glfwSetWindowRefreshCallback</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type><ref refid="group__window_1ga7a56f9e0227e2cd9470d80d919032e08" kindref="member">GLFWwindowrefreshfun</ref></type>
          <declname>cbfun</declname>
        </param>
        <briefdescription>
<para>Sets the refresh callback for the specified window. </para>        </briefdescription>
        <detaileddescription>
<para>This function sets the refresh callback of the specified window, which is called when the client area of the window needs to be redrawn, for example if the window has been exposed after having been covered by another window.</para><para>On compositing window systems such as Aero, Compiz or Aqua, where the window contents are saved off-screen, this callback may be called only very infrequently or never at all.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose callback to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cbfun</parametername>
</parameternamelist>
<parameterdescription>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been initialized.</para></simplesect>
<simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para></simplesect>
<simplesect kind="see"><para>window_refresh</para></simplesect>
<simplesect kind="since"><para>Added in GLFW 2.5.</para></simplesect>
<simplesect kind="par"><title></title><para><bold>GLFW 3:</bold> Added window handle parameter. Updated callback signature. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="2201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gac89c6534ba7fbab6f6c68b855656c0d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="group__window_1ga58be2061828dd35080bb438405d3a7e2" kindref="member">GLFWwindowfocusfun</ref></type>
        <definition>GLFWAPI GLFWwindowfocusfun glfwSetWindowFocusCallback</definition>
        <argsstring>(GLFWwindow *window, GLFWwindowfocusfun cbfun)</argsstring>
        <name>glfwSetWindowFocusCallback</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type><ref refid="group__window_1ga58be2061828dd35080bb438405d3a7e2" kindref="member">GLFWwindowfocusfun</ref></type>
          <declname>cbfun</declname>
        </param>
        <briefdescription>
<para>Sets the focus callback for the specified window. </para>        </briefdescription>
        <detaileddescription>
<para>This function sets the focus callback of the specified window, which is called when the window gains or loses input focus.</para><para>After the focus callback is called for a window that lost input focus, synthetic key and mouse button release events will be generated for all such that had been pressed. For more information, see <ref refid="group__input_1gaa73bb92f628a2a0be9c132d56f19362c" kindref="member">glfwSetKeyCallback</ref> and <ref refid="group__input_1ga20e5ba1ce4e086aedd48a06dc311c95f" kindref="member">glfwSetMouseButtonCallback</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose callback to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cbfun</parametername>
</parameternamelist>
<parameterdescription>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been initialized.</para></simplesect>
<simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para></simplesect>
<simplesect kind="see"><para>window_focus</para></simplesect>
<simplesect kind="since"><para>Added in GLFW 3.0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="2228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga17cd86946117b56c76397530900519db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="group__window_1gad2d4e4c3d28b1242e742e8268b9528af" kindref="member">GLFWwindowiconifyfun</ref></type>
        <definition>GLFWAPI GLFWwindowiconifyfun glfwSetWindowIconifyCallback</definition>
        <argsstring>(GLFWwindow *window, GLFWwindowiconifyfun cbfun)</argsstring>
        <name>glfwSetWindowIconifyCallback</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type><ref refid="group__window_1gad2d4e4c3d28b1242e742e8268b9528af" kindref="member">GLFWwindowiconifyfun</ref></type>
          <declname>cbfun</declname>
        </param>
        <briefdescription>
<para>Sets the iconify callback for the specified window. </para>        </briefdescription>
        <detaileddescription>
<para>This function sets the iconification callback of the specified window, which is called when the window is iconified or restored.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose callback to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cbfun</parametername>
</parameternamelist>
<parameterdescription>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been initialized.</para></simplesect>
<simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para></simplesect>
<simplesect kind="see"><para>window_iconify</para></simplesect>
<simplesect kind="since"><para>Added in GLFW 3.0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="2250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gad766bcdb4465f9c6c62e5d8ca7cfba56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="group__window_1ga3e218ef9ff826129c55a7d5f6971a285" kindref="member">GLFWframebuffersizefun</ref></type>
        <definition>GLFWAPI GLFWframebuffersizefun glfwSetFramebufferSizeCallback</definition>
        <argsstring>(GLFWwindow *window, GLFWframebuffersizefun cbfun)</argsstring>
        <name>glfwSetFramebufferSizeCallback</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type><ref refid="group__window_1ga3e218ef9ff826129c55a7d5f6971a285" kindref="member">GLFWframebuffersizefun</ref></type>
          <declname>cbfun</declname>
        </param>
        <briefdescription>
<para>Sets the framebuffer resize callback for the specified window. </para>        </briefdescription>
        <detaileddescription>
<para>This function sets the framebuffer resize callback of the specified window, which is called when the framebuffer of the specified window is resized.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose callback to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cbfun</parametername>
</parameternamelist>
<parameterdescription>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been initialized.</para></simplesect>
<simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para></simplesect>
<simplesect kind="see"><para>window_fbsize</para></simplesect>
<simplesect kind="since"><para>Added in GLFW 3.0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="2272" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga872d16e4c77f58c0436f356255920cfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>GLFWAPI void glfwPollEvents</definition>
        <argsstring>(void)</argsstring>
        <name>glfwPollEvents</name>
        <param>
          <type><ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        </param>
        <briefdescription>
<para>Processes all pending events. </para>        </briefdescription>
        <detaileddescription>
<para>This function processes only those events that are already in the event queue and then returns immediately. Processing events will cause the window and input callbacks associated with those events to be called.</para><para>On some platforms, a window move, resize or menu operation will cause event processing to block. This is due to how event processing is designed on those platforms. You can use the window refresh callback to redraw the contents of your window when necessary during such operations.</para><para>On some platforms, certain events are sent directly to the application without going through the event queue, causing callbacks to be called outside of a call to one of the event processing functions.</para><para>Event processing is not required for joystick input to work.</para><para><simplesect kind="par"><title>Reentrancy</title><para>This function may not be called from a callback.</para></simplesect>
<simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para></simplesect>
<simplesect kind="see"><para>events </para></simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga6e042d05823c11e11c7339b81a237738" kindref="member">glfwWaitEvents</ref></para></simplesect>
<simplesect kind="since"><para>Added in GLFW 1.0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="2305" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga6e042d05823c11e11c7339b81a237738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>GLFWAPI void glfwWaitEvents</definition>
        <argsstring>(void)</argsstring>
        <name>glfwWaitEvents</name>
        <param>
          <type><ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        </param>
        <briefdescription>
<para>Waits until events are queued and processes them. </para>        </briefdescription>
        <detaileddescription>
<para>This function puts the calling thread to sleep until at least one event is available in the event queue. Once one or more events are available, it behaves exactly like <ref refid="group__window_1ga872d16e4c77f58c0436f356255920cfc" kindref="member">glfwPollEvents</ref>, i.e. the events in the queue are processed and the function then returns immediately. Processing events will cause the window and input callbacks associated with those events to be called.</para><para>Since not all events are associated with callbacks, this function may return without a callback having been called even if you are monitoring all callbacks.</para><para>On some platforms, a window move, resize or menu operation will cause event processing to block. This is due to how event processing is designed on those platforms. You can use the window refresh callback to redraw the contents of your window when necessary during such operations.</para><para>On some platforms, certain callbacks may be called outside of a call to one of the event processing functions.</para><para>If no windows exist, this function returns immediately. For synchronization of threads in applications that do not create windows, use your threading library of choice.</para><para>Event processing is not required for joystick input to work.</para><para><simplesect kind="par"><title>Reentrancy</title><para>This function may not be called from a callback.</para></simplesect>
<simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para></simplesect>
<simplesect kind="see"><para>events </para></simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga872d16e4c77f58c0436f356255920cfc" kindref="member">glfwPollEvents</ref></para></simplesect>
<simplesect kind="since"><para>Added in GLFW 2.5. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="2348" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gad6f6b997278c91c43b35970eb9713d7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>GLFWAPI void glfwPostEmptyEvent</definition>
        <argsstring>(void)</argsstring>
        <name>glfwPostEmptyEvent</name>
        <param>
          <type><ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        </param>
        <briefdescription>
<para>Posts an empty event to the event queue. </para>        </briefdescription>
        <detaileddescription>
<para>This function posts an empty event from the current thread to the event queue, causing <ref refid="group__window_1ga6e042d05823c11e11c7339b81a237738" kindref="member">glfwWaitEvents</ref> to return.</para><para>If no windows exist, this function returns immediately. For synchronization of threads in applications that do not create windows, use your threading library of choice.</para><para><simplesect kind="par"><title>Thread Safety</title><para>This function may be called from any thread.</para></simplesect>
<simplesect kind="see"><para>events </para></simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga6e042d05823c11e11c7339b81a237738" kindref="member">glfwWaitEvents</ref></para></simplesect>
<simplesect kind="since"><para>Added in GLFW 3.1. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="2369" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gafb827800eedbfcbc97b1e5408df668d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47" kindref="member">GLFWAPI</ref> <ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>GLFWAPI void glfwSwapBuffers</definition>
        <argsstring>(GLFWwindow *window)</argsstring>
        <name>glfwSwapBuffers</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
<para>Swaps the front and back buffers of the specified window. </para>        </briefdescription>
        <detaileddescription>
<para>This function swaps the front and back buffers of the specified window. If the swap interval is greater than zero, the GPU driver waits the specified number of screen updates before swapping the buffers.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose buffers to swap.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Thread Safety</title><para>This function may be called from any thread.</para></simplesect>
<simplesect kind="see"><para>buffer_swap </para></simplesect>
<simplesect kind="see"><para><ref refid="group__context_1ga12a595c06947cec4967c6e1f14210a8a" kindref="member">glfwSwapInterval</ref></para></simplesect>
<simplesect kind="since"><para>Added in GLFW 1.0.</para></simplesect>
<simplesect kind="par"><title></title><para><bold>GLFW 3:</bold> Added window handle parameter. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/Libraries/VSProjects/UntitledEngine/Dependencies/include/glfw3.h" line="3204" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This is the reference documentation for window related functions and types, including creation, deletion and event polling. For more information, see the <ref refid="group__window" kindref="compound">Window handling</ref>. </para>    </detaileddescription>
  </compounddef>
</doxygen>
